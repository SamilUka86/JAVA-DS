import java.util.Scanner;
public class deque
{
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter size:");
        int n=sc.nextInt();
        Queue1 q=new Queue1(n);
        boolean boo=true;
        while(boo)
        {
            System.out.println("Enter your choice");
            System.out.println("Enter 1 for Insert from rear:");
            System.out.println("Enter 2 for Insert from front:");
            System.out.println("Enter 3 for Delete from rear:");
            System.out.println("Enter 4 for Delete from front:");
            System.out.println("Enter 5 for display:");
            System.out.println("Enter 6 to exit:");
            int c=sc.nextInt();
            switch (c)
            {
                case 1:
                    System.out.println("Enter number to insert:");
                    int y=sc.nextInt();
                    q.InsertFront(y);
                    break;
                case 2:
                    System.out.println("Enter number to insert:");
                    int l=sc.nextInt();
                    q.InsertRear(l);
                    break;
                case 3:
                    q.DeleteRear();
                    break;
                case 4:
                    q.DeleteFront();
                    break;
                case 5:
                    q.display();
                    break;
                case 6:
                    boo=false;
                    System.out.println("Exited!!");
                    break;
            }
        }
    }
}
class Queue1
{
    Scanner sc=new Scanner(System.in);
    int q[];
    int size,front,rear;
    Queue1(int c)
    {
        q=new int[c];
        size=c;
        front=-1;
        rear=-1;
    }
    void InsertRear(int k)
    {
        if((front==0 && rear==size-1)||(front==rear+1))
        {
            System.out.println("Queue is oveflow!!");
        }
        else
        {
            if(rear==-1)
            {
                front=rear=0;
            }
            else if(rear==size-1)
            {
                rear=0;
            }
            else
            {
                rear++;
            }
            q[rear]=k;
            System.out.println(k+" is inserted");
        }
    }
    void InsertFront(int k)
    {
        if((front==0 && rear==size-1)||(front==rear+1))
        {
            System.out.println("Queue is oveflow!!");
        }
        else
        {
            if(front==-1)
            {
                front=rear=0;
            }
            else if(front==0)
            {
                front=size-1;
            }
            else
            {
                front--;
            }
            q[front]=k;
            System.out.println(k+" is inserted");
        }
    }
    void display()
    {
        if(front==-1)
        {
            System.out.println("Queue is empty");
        }
        else
        {
            System.out.println("Queue:");
            for(int i=front;i != rear;i= (i+1) %size)
            {
                System.out.println(q[i]);
            }
            System.out.println(q[rear]);
        }
    }
    void DeleteFront()
    {
        if (front == -1) {
            System.out.println("Queue is empty!");
        }
        int y=q[front];
        if(front==rear)
        {
            front=rear=-1;
        }
        else if(front==size-1)
        {
            front=0;
        }
        else
        {
         front++;
        }
        System.out.println(y+ " is deleted");
    }
    void DeleteRear()
    {
        if (rear == -1) {
            System.out.println("Queue is empty!");
        }
        int y=q[rear];
        if(front==rear)
        {
            front=rear=-1;
        }
        else if(rear==0)
        {
            rear=size-1;
        }
        else
        {
            rear--;
        }
        System.out.println(y+ " is deleted");
    }
}
