import java.util.Scanner;

class MyStack {
    int[] arr;
    int top;

    MyStack(int size) {
        arr = new int[size];
        top = -1;
    }

    void push(int val) {
        if (top == arr.length - 1) {
            System.out.println("Stack Overflow");
            return;
        }
        arr[++top] = val;
    }

    int pop() {
        if (top == -1) {
            System.out.println("Stack Underflow");
            return -1;
        }
        return arr[top--];
    }

    boolean isEmpty() {
        return top == -1;
    }
}

public class PrefixEvaluation {

    public static int evaluatePrefix(String expression) {
        MyStack stack = new MyStack(expression.length());

        // Traverse from right to left
        for (int i = expression.length() - 1; i >= 0; i--) {
            char ch = expression.charAt(i);

            // If the character is an operand (digit)
            if (Character.isDigit(ch)) {
                stack.push(ch - '0'); // Convert char to int
            }
            // If the character is an operator
            else {
                int val1 = stack.pop();
                int val2 = stack.pop();

                switch (ch) {
                    case '+':
                        stack.push(val1 + val2);
                        break;
                    case '-':
                        stack.push(val1 - val2);
                        break;
                    case '*':
                        stack.push(val1 * val2);
                        break;
                    case '/':
                        stack.push(val1 / val2);
                        break;
                }
            }
        }
        return stack.pop();
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter Prefix Expression (e.g., -+2*31 9): ");
        String expression = sc.nextLine().replaceAll("\\s+", ""); // Remove spaces

        int result = evaluatePrefix(expression);
        System.out.println("Result: " + result);
    }
}
